#include <stdio.h>
#include <stdlib.h>

#include <sys/types.h>
#include <sys/socket.h>
#include <netdb.h>
#include <unistd.h>

#include <string.h>

int main(int argc, char * argv[]) {
	// We need at least 4 args
	if (argc < 4) {
		// There are less than 4 arguments
		printf("Error: not enough args\n");
		exit(EXIT_FAILURE);
	}
	//printf("%s %s\n", argv[1], argv[2]);
	
	struct addrinfo *res;
	struct addrinfo hints;
	memset(&hints, 0, sizeof(struct addrinfo));
	
	// Configure the servers
	hints.ai_family = AF_INET; // AF_INET = famille IPv4
	hints.ai_protocol = IPPROTO_UDP; // Protocol UDP
	
	int e = getaddrinfo(argv[1], argv[3], &hints, &res);
	if (e != 0) { // If getaddrinfo send an error
		fprintf(stderr, "getaddrinfo error %s\n", gai_strerror(e));
		exit(EXIT_FAILURE);
	}
	
	// Reserving a connection socket to the server
	int sock;
	if ((sock = socket(res->ai_family, res->ai_socktype, res->ai_protocol)) < 0) {
		printf("socket error\n");
		exit(EXIT_FAILURE);
	}
	//connect(sock, res->ai_addr, sizeof(struct stockaddr));
	
	printf("send\n");
	// Building a read query
	char buf[300];
	sprintf(buf, "01%s0octet0", argv[2]); // Send the file name
	// Send the query
	if (sendto(sock, buf, strlen(buf), MSG_EOR, res->ai_addr, res->ai_addrlen) < 0) {
		printf("sendto error\n");
		exit(EXIT_FAILURE);
	}
	printf("recv\n");
	
	// Receiving a file consisting of a single data packet
	char bufr[300];
	if (recv(sock, &bufr, strlen(buf), MSG_EOR) < 0) {
		printf("recv error\n");
		exit(EXIT_FAILURE);
	}
	printf("end recv\n");
	printf("%s\n", bufr);
	
	printf("success Q4.a\n");
	exit(EXIT_SUCCESS);
}



